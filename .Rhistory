# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv')
# create clustering dataset
M <- playerShotProfiles19_M %>%
filter(totalGoalsScored > 4) %>%
select(-player, -penalty, -directFK, -totalGoalsScored)
rownames(M) <- filter(playerShotProfiles19_M, totalGoalsScored > 4)$player
M <- scale(M)
# set seed
set.seed(823)
# find best k
partition_algo <- c('kmeans', 'clara', 'fanny', 'pam')
plotOptimalK <- function(algoList, plotMethod){
diagnosticPlots <- c()
diagnosticPlots <- lapply(
X = algoList,
FUN = function(algo) fviz_nbclust(
x = M,
FUNcluster = get(algo),
method = plotMethod,
verbose = F
) +
labs(title=algo)
)
n <- length(diagnosticPlots)
nCol <- floor(sqrt(n))
return (do.call("grid.arrange", c(diagnosticPlots, ncol=nCol)))
}
# elbowplts
plotOptimalK(partition_algo, 'wss')
# LOADING LIBRARIES
source('R/libraries.R')
# elbowplts
plotOptimalK(partition_algo, 'wss')
# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv')
# create clustering dataset
M <- playerShotProfiles19_M %>%
filter(totalGoalsScored > 4) %>%
select(-player, -penalty, -directFK, -totalGoalsScored)
rownames(M) <- filter(playerShotProfiles19_M, totalGoalsScored > 4)$player
M <- scale(M)
# set seed
set.seed(823)
# find best k
partition_algo <- c('kmeans', 'clara', 'fanny', 'pam')
plotOptimalK <- function(algoList, plotMethod){
diagnosticPlots <- c()
diagnosticPlots <- lapply(
X = algoList,
FUN = function(algo) fviz_nbclust(
x = M,
FUNcluster = get(algo),
method = plotMethod,
verbose = F
) +
labs(title=algo)
)
n <- length(diagnosticPlots)
nCol <- floor(sqrt(n))
return (do.call("grid.arrange", c(diagnosticPlots, ncol=nCol)))
}
# elbowplts
plotOptimalK(partition_algo, 'wss')
# silhoutte
plotOptimalK(partition_algo, 'silhouette')
# gap statistic
plotOptimalK(partition_algo, 'gap_stat')
View(M)
# partition according to best n
kList <- c(2,4,6,9)
partitionings <- c()
for (i in c(1:length(kList))){
k <- kList[i]
clusters <- c()
for (j in c(1:length(partition_algo))){
clusters[[j]] <- get(partition_algo[j])(M, k)
if (partition_algo[j] == 'kmeans') names(clusters[[j]])[1] <- 'clustering'
}
partitionings[[i]] <- clusters
names(partitionings)[i] <- as.character(k)
}
# clusplot analysis
# 1- clusplot
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,,
lines=0
)
}
}
# clusplot analysis
# 1- clusplot
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0
)
}
}
for (i in c(1:length(kList))){
k <- kList[i]
clusters <- c()
for (j in c(1:length(partition_algo))){
clusters[[j]] <- get(partition_algo[j])(M, k)
if (partition_algo[j] == 'kmeans') names(clusters[[j]])[1] <- 'clustering'
}
partitionings[[i]] <- clusters
names(partitionings)[i] <- as.character(k)
}
# find best k
partition_algo <- c('kmeans', 'clara', 'fanny', 'pam')
plotOptimalK <- function(algoList, plotMethod){
diagnosticPlots <- c()
diagnosticPlots <- lapply(
X = algoList,
FUN = function(algo) fviz_nbclust(
x = M,
FUNcluster = get(algo),
method = plotMethod,
verbose = F
) +
labs(title=algo)
)
n <- length(diagnosticPlots)
nCol <- floor(sqrt(n))
return (do.call("grid.arrange", c(diagnosticPlots, ncol=nCol)))
}
# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv')
# create clustering dataset
M <- playerShotProfiles19_M %>%
filter(totalGoalsScored > 4) %>%
select(-player, -penalty, -directFK, -totalGoalsScored)
rownames(M) <- filter(playerShotProfiles19_M, totalGoalsScored > 4)$player
M <- scale(M)
# set seed
set.seed(823)
# find best k
partition_algo <- c('kmeans', 'clara', 'fanny', 'pam')
plotOptimalK <- function(algoList, plotMethod){
diagnosticPlots <- c()
diagnosticPlots <- lapply(
X = algoList,
FUN = function(algo) fviz_nbclust(
x = M,
FUNcluster = get(algo),
method = plotMethod,
verbose = F
) +
labs(title=algo)
)
n <- length(diagnosticPlots)
nCol <- floor(sqrt(n))
return (do.call("grid.arrange", c(diagnosticPlots, ncol=nCol)))
}
# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv')
# create clustering dataset
M <- playerShotProfiles19_M %>%
filter(totalGoalsScored > 4) %>%
select(-player, -penalty, -directFK, -totalGoalsScored)
rownames(M) <- filter(playerShotProfiles19_M, totalGoalsScored > 4)$player
M <- scale(M)
# set seed
set.seed(823)
# find best k
partition_algo <- c('kmeans', 'clara', 'fanny', 'pam')
plotOptimalK <- function(algoList, plotMethod){
diagnosticPlots <- c()
diagnosticPlots <- lapply(
X = algoList,
FUN = function(algo) fviz_nbclust(
x = M,
FUNcluster = get(algo),
method = plotMethod,
verbose = F
) +
labs(title=algo)
)
n <- length(diagnosticPlots)
nCol <- floor(sqrt(n))
return (do.call("grid.arrange", c(diagnosticPlots, ncol=nCol)))
}
# elbowplts
plotOptimalK(partition_algo, 'wss')
# silhoutte
plotOptimalK(partition_algo, 'silhouette')
# gap statistic
plotOptimalK(partition_algo, 'gap_stat')
# partition according to best n
kList <- c(2,4,6,9)
partitionings <- c()
for (i in c(1:length(kList))){
k <- kList[i]
clusters <- c()
for (j in c(1:length(partition_algo))){
clusters[[j]] <- get(partition_algo[j])(M, k)
if (partition_algo[j] == 'kmeans') names(clusters[[j]])[1] <- 'clustering'
}
partitionings[[i]] <- clusters
names(partitionings)[i] <- as.character(k)
}
partitionings
# clusplot analysis
# 1- clusplot
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0
)
}
}
# 2- plotcluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering
)
}
}
??par
# 3- fviz_cluster
for (i in c(1:length(partitionings))){
plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
plotList[[j]] <- plot(fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) + ggtitle(partition_algo[j])
)
}
n <- length(plotList)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(plotList, ncol=nCol))
}
# 3- fviz_cluster
par(mfrow=c(2, 2))
# 3- fviz_cluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
#plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
#plotList[[j]] <-
plot(fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) + ggtitle(partition_algo[j])
)
}
# n <- length(plotList)
# nCol <- floor(sqrt(n))
# do.call("grid.arrange", c(plotList, ncol=nCol))
}
# 3- fviz_cluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
#plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
#plotList[[j]] <-
fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) + ggtitle(partition_algo[j])
}
# n <- length(plotList)
# nCol <- floor(sqrt(n))
# do.call("grid.arrange", c(plotList, ncol=nCol))
}
# 3- fviz_cluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
plotList[[j]] <-
fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) + ggtitle(partition_algo[j])
}
# n <- length(plotList)
# nCol <- floor(sqrt(n))
# do.call("grid.arrange", c(plotList, ncol=nCol))
}
plotList
n <- length(plotList)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(plotList, ncol=nCol))
# 3- fviz_cluster
par(mfrow=c(2, 2))
# 3- fviz_cluster
#par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
plotList[[j]] <-
fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) + ggtitle(partition_algo[j])
}
n <- length(plotList)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(plotList, ncol=nCol))
}
# 3- fviz_cluster
for (i in c(1:length(partitionings))){
plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
plotList[[j]] <-
fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) +
theme(title=partition_algo[j],
legend.position='none')
}
n <- length(plotList)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(plotList, ncol=nCol))
}
# 3- fviz_cluster
for (i in c(1:length(partitionings))){
plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
plotList[[j]] <-
fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) +
ggtitle(partition_algo[j]) +
theme(legend.position='none')
}
n <- length(plotList)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(plotList, ncol=nCol))
}
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plot(plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering
))
}
}
# 2- plotcluster
par(mfrow=c(2, 2))
# 2- plotcluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plot(
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering
)
)
}
}
# 2- plotcluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering
)
plot(main=partition_algo[j])
}
}
# 2- plotcluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering
)
#plot(main=partition_algo[j])
}
}
??plotcluster
# 2- plotcluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering,
mtext = 'test'
)
#plot(main=partition_algo[j])
}
}
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering,
main = 'test'
)
warnings
warnings()
# 2- plotcluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering,
main = partition_algo[j]
)
}
}

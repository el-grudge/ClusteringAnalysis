labs(title=algo)
)
n <- length(diagnosticPlots)
nCol <- floor(sqrt(n))
return (do.call("grid.arrange", c(diagnosticPlots, ncol=nCol)))
}
fixClustHeight <- function(v_dist, v_hclust, listClust){
for(j in v_dist) for(k in v_hclust) listClust[[j]][[k]]$height <- rank(listClust[[j]][[k]]$height)
return (listClust)
}
plotHClust <- function(v_dist, v_hclust, listClust){
par(
mfrow = c(length(v_dist),length(v_hclust)),
mar = c(0,0,0,0),
mai = c(0,0,0,0),
oma = c(0,0,0,0)
)
for(j in v_dist) for(k in v_hclust) {
plot(
x = listClust[[j]][[k]],
labels = FALSE,
axes = TRUE,
main=''
)
title(main=paste(j,k,coef(listClust[[j]][[k]]), sep=' '), line=-0.7)
}
}
getClustCoeffs <- function(v_dist, v_hclust, listClust) {
M_coef <- matrix(
data = NA,
nrow = length(v_dist),
ncol = length(v_hclust)
)
rownames(M_coef) <- v_dist
colnames(M_coef) <- v_hclust
for(j in v_dist) for(k in v_hclust) try({
M_coef[j,k] <- coef(
object = listClust[[j]][[k]]
)
})
return (M_coef)
}
plotOutlierClust <- function(M_coef){
outlier_algo <- rownames(M_coef)[which(M_coef == min(M_coef), arr.ind = TRUE)[1]]
outlier_dist <- colnames(M_coef)[which(M_coef == min(M_coef), arr.ind = TRUE)[2]]
par(mfrow=c(1,1))
plot(
x = list_hclust[[outlier_algo]][[outlier_dist]],
labels = FALSE,
axes=TRUE,
sub = "",
main=""
)
title(paste(outlier_algo, outlier_dist, min(M_coef), sep=' '), line=-1)
}
plotEvenClust <- function(M_coef){
even_algo <- rownames(M_coef)[which(M_coef == max(M_coef), arr.ind = TRUE)[1]]
even_dist <- colnames(M_coef)[which(M_coef == max(M_coef), arr.ind = TRUE)[2]]
par(mfrow=c(1,1))
plot(
x = list_hclust[[even_algo]][[even_dist]],
labels = FALSE,
axes=TRUE,
sub = "",
main=""
)
title(paste(even_algo, even_dist, max(M_coef), sep=' '), line=-1)
}
plotHClust(v_dist, v_hclust, list_hclust)
list_hclust[['canberra']][['single']]
cutree_M <- cutree(
tree = list_hclust[['canberra']][['single']],
k = 200
)
silhouette_M <- silhouette(
x = cutree_M,
dist = 'canberra'
)
cutree_M
list_dist
names(list_dist)
list_dist$canberra
silhouette_M <- silhouette(
x = cutree_M,
dist = list_dist$canberra
)
plot(silhouette_M)
View(playerShotProfiles19_M)
View(M)
# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv')
# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv')
# create clustering dataset
M <- playerShotProfiles19_M %>%
select(-player, -penalty, -directFK, -totalGoalsScored)
rownames(M) <- playerShotProfiles19_M$player
M <- scale(M)
# create new column 'team', which corresponds to h_team when h and a_team when a
bundesliga19_shots_M <- read.csv('data/bundesliga19_shots_M.csv', stringsAsFactors = FALSE)
bundesliga19_shots_M
View(bundesliga19_shots_M)
bundesliga19_shots_M <- mutate(bundesliga19_shots_M,
team=ifelse(h_a=='h', h_team, a_team),
X=X*100,
Y=Y*100,
dist=sqrt(((X-100) * 1.05)^2 + ((Y-50) * 0.68)^2))
bundesliga19_shots_M %>%
filter(result!='OwnGoal') %>%
group_by(match_id, player) %>%
summarise(shotCount=n(),
goalsScored=n_distinct(id[result=='Goal']),
xG=sum(xG),
avgShotDist=mean(dist),
openPlay=n_distinct(id[situation=='OpenPlay']),
setPiece=n_distinct(id[situation=='SetPiece']),
penalty=n_distinct(id[situation=='Penalty']),
fromCorner=n_distinct(id[situation=='FromCorner']),
directFK=n_distinct(id[situation=='DirectFreekick']),
rightFoot=n_distinct(id[shotType=='RightFoot']),
leftFoot=n_distinct(id[shotType=='LeftFoot']),
head=n_distinct(id[shotType=='Head'])
)
View(bundesliga19_shots_M %>%
filter(result!='OwnGoal') %>%
group_by(match_id, player) %>%
summarise(shotCount=n(),
goalsScored=n_distinct(id[result=='Goal']),
xG=sum(xG),
avgShotDist=mean(dist),
openPlay=n_distinct(id[situation=='OpenPlay']),
setPiece=n_distinct(id[situation=='SetPiece']),
penalty=n_distinct(id[situation=='Penalty']),
fromCorner=n_distinct(id[situation=='FromCorner']),
directFK=n_distinct(id[situation=='DirectFreekick']),
rightFoot=n_distinct(id[shotType=='RightFoot']),
leftFoot=n_distinct(id[shotType=='LeftFoot']),
head=n_distinct(id[shotType=='Head']))
)
View(bundesliga19_shots_M %>%
filter(result!='OwnGoal') %>%
group_by(match_id, player) %>%
summarise(shotCount=n(),
goalsScored=n_distinct(id[result=='Goal']),
xG=sum(xG),
avgShotDist=mean(dist),
openPlay=n_distinct(id[situation=='OpenPlay']),
setPiece=n_distinct(id[situation=='SetPiece']),
penalty=n_distinct(id[situation=='Penalty']),
fromCorner=n_distinct(id[situation=='FromCorner']),
directFK=n_distinct(id[situation=='DirectFreekick']),
rightFoot=n_distinct(id[shotType=='RightFoot']),
leftFoot=n_distinct(id[shotType=='LeftFoot']),
head=n_distinct(id[shotType=='Head'])
) %>%
group_by(player) %>%
summarise(
shotCount=mean(shotCount),
totalGoalsScored=sum(goalsScored),
xG=mean(xG),
avgShotDist=mean(avgShotDist),
openPlay=mean(openPlay),
setPiece=mean(setPiece),
penalty=mean(penalty),
fromCorner=mean(fromCorner),
directFK=mean(directFK),
rightFoot=mean(rightFoot),
leftFoot=mean(leftFoot),
head=mean(head)
) %>%
arrange(desc(totalGoalsScored)))
# player shot profiles
playerShotProfiles19_M <- data.frame(bundesliga19_shots_M %>%
filter(result!='OwnGoal') %>%
group_by(match_id, player) %>%
summarise(shotCount=n(),
goalsScored=n_distinct(id[result=='Goal']),
xG=sum(xG),
avgShotDist=mean(dist),
openPlay=n_distinct(id[situation=='OpenPlay']),
setPiece=n_distinct(id[situation=='SetPiece']),
penalty=n_distinct(id[situation=='Penalty']),
fromCorner=n_distinct(id[situation=='FromCorner']),
directFK=n_distinct(id[situation=='DirectFreekick']),
rightFoot=n_distinct(id[shotType=='RightFoot']),
leftFoot=n_distinct(id[shotType=='LeftFoot']),
head=n_distinct(id[shotType=='Head'])
) %>%
group_by(player) %>%
summarise(
shotCount=mean(shotCount),
totalGoalsScored=sum(goalsScored),
xG=mean(xG),
avgShotDist=mean(avgShotDist),
openPlay=mean(openPlay),
setPiece=mean(setPiece),
penalty=mean(penalty),
fromCorner=mean(fromCorner),
directFK=mean(directFK),
rightFoot=mean(rightFoot),
leftFoot=mean(leftFoot),
head=mean(head)
) %>%
arrange(desc(totalGoalsScored)))
write.csv(playerShotProfiles19_M, file='data/playerShotProfiles19_M.csv')
# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv')
View(playerShotProfiles19_M)
# player shot profiles
playerShotProfiles19_M <- data.frame(bundesliga19_shots_M %>%
filter(result!='OwnGoal') %>%
group_by(match_id, player) %>%
summarise(shotCount=n(),
goalsScored=n_distinct(id[result=='Goal']),
xG=sum(xG),
avgShotDist=mean(dist),
openPlay=n_distinct(id[situation=='OpenPlay']),
setPiece=n_distinct(id[situation=='SetPiece']),
penalty=n_distinct(id[situation=='Penalty']),
fromCorner=n_distinct(id[situation=='FromCorner']),
directFK=n_distinct(id[situation=='DirectFreekick']),
rightFoot=n_distinct(id[shotType=='RightFoot']),
leftFoot=n_distinct(id[shotType=='LeftFoot']),
head=n_distinct(id[shotType=='Head'])
) %>%
group_by(player) %>%
summarise(
shotCount=mean(shotCount),
totalGoalsScored=sum(goalsScored),
xG=mean(xG),
avgShotDist=mean(avgShotDist),
openPlay=mean(openPlay),
setPiece=mean(setPiece),
penalty=mean(penalty),
fromCorner=mean(fromCorner),
directFK=mean(directFK),
rightFoot=mean(rightFoot),
leftFoot=mean(leftFoot),
head=mean(head)
) %>%
arrange(desc(totalGoalsScored)))
View(playerShotProfiles19_M)
??write.csv
??write.csv2
# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv', stringsAsFactors = FALSE)
View(playerShotProfiles19_M)
# create new column 'team', which corresponds to h_team when h and a_team when a
bundesliga19_shots_M <- read.csv('data/bundesliga19_shots_M.csv', stringsAsFactors = FALSE)
View(bundesliga19_shots_M)
bundesliga19_shots_M <- mutate(bundesliga19_shots_M,
team=ifelse(h_a=='h', h_team, a_team),
X=X*100,
Y=Y*100,
dist=sqrt(((X-100) * 1.05)^2 + ((Y-50) * 0.68)^2))
# player shot profiles
playerShotProfiles19_M <- data.frame(bundesliga19_shots_M %>%
filter(result!='OwnGoal') %>%
group_by(match_id, player) %>%
summarise(shotCount=n(),
goalsScored=n_distinct(id[result=='Goal']),
xG=sum(xG),
avgShotDist=mean(dist),
openPlay=n_distinct(id[situation=='OpenPlay']),
setPiece=n_distinct(id[situation=='SetPiece']),
penalty=n_distinct(id[situation=='Penalty']),
fromCorner=n_distinct(id[situation=='FromCorner']),
directFK=n_distinct(id[situation=='DirectFreekick']),
rightFoot=n_distinct(id[shotType=='RightFoot']),
leftFoot=n_distinct(id[shotType=='LeftFoot']),
head=n_distinct(id[shotType=='Head'])
) %>%
group_by(player) %>%
summarise(
shotCount=mean(shotCount),
totalGoalsScored=sum(goalsScored),
xG=mean(xG),
avgShotDist=mean(avgShotDist),
openPlay=mean(openPlay),
setPiece=mean(setPiece),
penalty=mean(penalty),
fromCorner=mean(fromCorner),
directFK=mean(directFK),
rightFoot=mean(rightFoot),
leftFoot=mean(leftFoot),
head=mean(head)
) %>%
arrange(desc(totalGoalsScored)))
View(playerShotProfiles19_M)
write.csv(playerShotProfiles19_M, file='data/playerShotProfiles19_M.csv', row.names = FALSE)
# read data
playerShotProfiles19_M <- read.csv('data/playerShotProfiles19_M.csv', stringsAsFactors = FALSE)
View(playerShotProfiles19_M)
# create clustering dataset
M <- playerShotProfiles19_M %>%
select(-player, -penalty, -directFK, -totalGoalsScored)
rownames(M) <- playerShotProfiles19_M$player
M <- scale(M)
# set seed
set.seed(823)
# find best k
partition_algo <- c('kmeans', 'clara', 'fanny', 'pam')
# elbowplts
plotOptimalK(partition_algo, 'wss', M)
# silhoutte
#partition_algo <- c('kmeans', 'clara', 'pam')
plotOptimalK(partition_algo, 'silhouette', M)
# gap statistic
plotOptimalK(partition_algo, 'gap_stat', M)
# partition according to best n
kList <- c(2,3,4,7)
partitionings <- c()
for (i in c(1:length(kList))){
k <- kList[i]
clusters <- c()
for (j in c(1:length(partition_algo))){
clusters[[j]] <- get(partition_algo[j])(M, k)
if (partition_algo[j] == 'kmeans') names(clusters[[j]])[1] <- 'clustering'
}
partitionings[[i]] <- clusters
names(partitionings)[i] <- as.character(k)
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=-1
)
}
}
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=-0.5
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=-0.5
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=-0.05
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0
)
}
}
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=FALSE,
shade=TRUE,
lines=0
)
}
}
??clusplot
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0,
cex=0
)
}
}
# 2- plotcluster
par(mfrow=c(2, 2))
# 2- plotcluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering,
main = partition_algo[j]
)
}
}
# 3- fviz_cluster
for (i in c(1:length(partitionings))){
plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
plotList[[j]] <-
fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) +
ggtitle(partition_algo[j]) +
theme(legend.position='none')
}
n <- length(plotList)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(plotList, ncol=nCol))
}
# set seed
set.seed(823)
# create dist vector
v_dist <- c("canberra","manhattan","euclidean","maximum","minkowski")
list_dist <- lapply(
X = v_dist,
FUN = function(distance_method) dist(
x = M,
method = distance_method
)
)
names(list_dist) <- v_dist
# hclust
v_hclust <- c('complete', 'average', 'single')
list_hclust <- list()
for(j in v_dist) for(k in v_hclust) list_hclust[[j]][[k]] <- hclust(
d = list_dist[[j]],
method = k
)
list_hclust <- fixClustHeight(v_dist, v_hclust, list_hclust)
plotHClust(v_dist, v_hclust, list_hclust)
M_coef <- getClustCoeffs(v_dist, v_hclust, list_hclust)
plotOutlierClust(M_coef)
plotEvenClust(M_coef)
# agnes
v_hclust <- c('complete', 'average', 'single')
list_agnes <- list()
for(j in v_dist) for(k in v_hclust) list_agnes[[j]][[k]] <- agnes(
M,
metric = j,
method = k
)
list_agnes <- fixClustHeight(v_dist, v_hclust, list_agnes)
plotHClust(v_dist, v_hclust, list_agnes)
M_coef <- getClustCoeffs(v_dist, v_hclust, list_agnes)
plotOutlierClust(M_coef)
plotEvenClust(M_coef)
plotHClust(v_dist, v_hclust, list_agnes)
M_coef <- getClustCoeffs(v_dist, v_hclust, list_agnes)
plotOutlierClust(M_coef)
plotEvenClust(M_coef)

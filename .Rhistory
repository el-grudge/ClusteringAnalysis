# silhoutte
#partition_algo <- c('kmeans', 'clara', 'pam')
plotOptimalK(partition_algo, 'silhouette', M)
# gap statistic
plotOptimalK(partition_algo, 'gap_stat', M)
# partition according to best n
kList <- c(2,3,4,7)
partitionings <- c()
for (i in c(1:length(kList))){
k <- kList[i]
clusters <- c()
for (j in c(1:length(partition_algo))){
clusters[[j]] <- get(partition_algo[j])(M, k)
if (partition_algo[j] == 'kmeans') names(clusters[[j]])[1] <- 'clustering'
}
partitionings[[i]] <- clusters
names(partitionings)[i] <- as.character(k)
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=-1
)
}
}
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=-0.5
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=-0.5
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=-0.05
)
}
}
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0
)
}
}
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=FALSE,
shade=TRUE,
lines=0
)
}
}
??clusplot
# clusplot analysis
# 1- clusplot
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
clusplot(
M,
main=partition_algo[j],
partitionings[[i]][[j]]$clustering,
color=TRUE,
shade=TRUE,
lines=0,
cex=0
)
}
}
# 2- plotcluster
par(mfrow=c(2, 2))
# 2- plotcluster
par(mfrow=c(2, 2))
for (i in c(1:length(partitionings))){
for (j in c(1:length(partitionings[[i]]))){
plotcluster(
x = M,
clvecd = partitionings[[i]][[j]]$clustering,
main = partition_algo[j]
)
}
}
# 3- fviz_cluster
for (i in c(1:length(partitionings))){
plotList <- c()
for (j in c(1:length(partitionings[[i]]))){
plotList[[j]] <-
fviz_cluster(
object = partitionings[[i]][[j]],
data = M,
geom = 'point'
) +
ggtitle(partition_algo[j]) +
theme(legend.position='none')
}
n <- length(plotList)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(plotList, ncol=nCol))
}
# set seed
set.seed(823)
# create dist vector
v_dist <- c("canberra","manhattan","euclidean","maximum","minkowski")
list_dist <- lapply(
X = v_dist,
FUN = function(distance_method) dist(
x = M,
method = distance_method
)
)
names(list_dist) <- v_dist
# hclust
v_hclust <- c('complete', 'average', 'single')
list_hclust <- list()
for(j in v_dist) for(k in v_hclust) list_hclust[[j]][[k]] <- hclust(
d = list_dist[[j]],
method = k
)
list_hclust <- fixClustHeight(v_dist, v_hclust, list_hclust)
plotHClust(v_dist, v_hclust, list_hclust)
M_coef <- getClustCoeffs(v_dist, v_hclust, list_hclust)
plotOutlierClust(M_coef)
plotEvenClust(M_coef)
# agnes
v_hclust <- c('complete', 'average', 'single')
list_agnes <- list()
for(j in v_dist) for(k in v_hclust) list_agnes[[j]][[k]] <- agnes(
M,
metric = j,
method = k
)
list_agnes <- fixClustHeight(v_dist, v_hclust, list_agnes)
plotHClust(v_dist, v_hclust, list_agnes)
M_coef <- getClustCoeffs(v_dist, v_hclust, list_agnes)
plotOutlierClust(M_coef)
plotEvenClust(M_coef)
plotHClust(v_dist, v_hclust, list_agnes)
M_coef <- getClustCoeffs(v_dist, v_hclust, list_agnes)
plotOutlierClust(M_coef)
plotEvenClust(M_coef)
# B- HIERARCHICAL
source('R/hierarchical')
partitionings
partitionings$`3`
length(partitionings$`3`)
partitionings$`3`[1]
kmeans_partition <- partitionings$`3`[1]
kmeans_partition
kmeans_partition
length(kmeans_partition)
kmeans_partition$clustering
kmeans_partition$centers
kmeans_partition[[1]]
kmeans_partition <- partitionings$`3`[1][[1]]
kmeans_partition$clustering
class(kmeans_partition$clustering)
kmeans_partition$centers
kmeans_partition$totss
kmeans_partition$withinss
kmeans_partition$tot.withinss
kmeans_partition$betweenss
kmeans_partition$size
kmeans_partition$iter
kmeans_partition$ifault
names(kmeans_partition$clustering)
data.frame(kmeans_partition$clustering)
M
nrow(data.frame(kmeans_partition$clustering))
playerShotProfiles19_M
nrow(playerShotProfiles19_M)
?data.frame
kmeans_partition$clustering
kmeans_partition$size
data.frame(kmeans_partition$clustering)
nrow(data.frame(kmeans_partition$clustering, names(kmeans_partition$clustering)))
data.frame(kmeans_partition$clustering, names(kmeans_partition$clustering))
playerShotProfiles19_M
View(playerShotProfiles19_M)
View(data.frame(kmeans_partition$clustering, names(kmeans_partition$clustering)))
View(data.frame(kmeans_partition$clustering, names<-names(kmeans_partition$clustering)))
names <- names(kmeans_partition$clustering)
View(data.frame(kmeans_partition$clustering, names))
# data manipulation
library(dplyr)
player <- names(kmeans_partition$clustering)
left_join(playerShotProfiles19_M, data.frame(kmeans_partition$clustering, player), by=c('player'))
playerClusters_M <- left_join(playerShotProfiles19_M, data.frame(kmeans_partition$clustering, player), by=c('player'))
View(playerClusters_M)
View(playerClusters_M[,c("player", "shotCount", "totalGoalsScored", "kmeans_partition.clustering")])
# data visualization
library(ggplot2)
??prcomp
prcomp(
x = M,
center = FALSE,
scale = FALSE
)
PCA_M <- prcomp(
x = M,
center = FALSE,
scale = FALSE
)
PCA_M$x
View(PCA_M$x)
PCA_M
PCA_M$x[1:2,]
View(PCA_M$x[,1:2])
PCA_M$x[,1:2]
names(PCA_M$x)
rownames(PCA_M$x)
data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x)
)
kmeans_partition$clustering
data.frame(kmeans_partition$clustering
)
data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x),
group=data.frame(kmeans_partition$clustering)
)
group_M <- data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x),
group=data.frame(kmeans_partition$clustering)
)
require(ggforce)
group_M <- data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x),
group=data.frame(kmeans_partition$clustering)
goalsScored=playerShotProfiles19_M$totalGoalsScored
)
head(group_M)
group_M <- data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x),
group=data.frame(kmeans_partition$clustering),
goalsScored=playerShotProfiles19_M$totalGoalsScored
)
group_M <- data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x),
group=data.frame(group=kmeans_partition$clustering),
goalsScored=playerShotProfiles19_M$totalGoalsScored
)
head(group_M)
ggplot(group_M) +
aes(x = PC1,y = PC2,size = goalsScored,color = group,fill = group,label = names,group = group) +
geom_point() +
ggrepel::geom_text_repel(color = "black",size = 3) +
ggtitle("Scatter plot of decathlon principal components","Color corresponds to k-means cluster") +
theme_bw() +
theme(legend.position = "top")
ggplot(group_M) +
aes(x = PC1,y = PC2,size = goalsScored,color = group,fill = group,group = group) +
geom_point() +
#ggrepel::geom_text_repel(color = "black",size = 3) +
ggtitle("Scatter plot of decathlon principal components","Color corresponds to k-means cluster") +
theme_bw() +
theme(legend.position = "top")
group_M <- data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x),
group=data.frame(group=as.character(kmeans_partition$clustering))
goalsScored=playerShotProfiles19_M$totalGoalsScored
)
head(group_M)
require(ggforce)
ggplot(group_M) +
aes(x = PC1,y = PC2,size = goalsScored,color = group,fill = group,group = group) +
geom_point() +
#ggrepel::geom_text_repel(color = "black",size = 3) +
ggtitle("Scatter plot of decathlon principal components","Color corresponds to k-means cluster") +
theme_bw() +
theme(legend.position = "top")
group_M <- data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x),
group=as.character(kmeans_partition$clustering)
goalsScored=playerShotProfiles19_M$totalGoalsScored
)
group_M <- data.frame(
PCA_M$x[,1:2],
names=rownames(PCA_M$x),
group=as.character(kmeans_partition$clustering),
goalsScored=playerShotProfiles19_M$totalGoalsScored
)
head(group_M)
ggplot(group_M) +
aes(x = PC1,y = PC2,size = goalsScored,color = group,fill = group,group = group) +
geom_point() +
#ggrepel::geom_text_repel(color = "black",size = 3) +
ggtitle("Scatter plot of decathlon principal components","Color corresponds to k-means cluster") +
theme_bw() +
theme(legend.position = "top")
i <- 81
url <- 'https://understat.com/match/'
paste(url,i,sep='')
GET(url)[[1]]
?GET
??GET
library(httr)
!http_error(url)
!
http_error(url)
#!
http_error(url)
i <- 81
url <- 'https://understat.com/match/'
http_error(paste(url,i,sep=''))
paste(url,i,sep='')
http_error(paste(url,i,sep=''))
!http_error(paste(url,i,sep=''))
http_error(paste(url,i,sep=''))
if !http_error(paste(url,i,sep='')) i
if (!http_error(paste(url,i,sep=''))) i
sapply(
80:81
function(x) if (!http_error(paste(url,i,sep=''))) i
)
sapply(
80:81,
function(x) if (!http_error(paste(url,i,sep=''))) i
)
lapply(
80:81,
function(x) if (!http_error(paste(url,i,sep=''))) i
)
sapply(
c(80:81),
function(x) if (!http_error(paste(url,i,sep=''))) i
)
vapply(
c(80:81),
function(x) if (!http_error(paste(url,i,sep=''))) i,
list
)
vapply(
c(80:81),
function(x) if (!http_error(paste(url,i,sep=''))) i,
vector
)
vapply(
c(80:81),
function(x) if (!http_error(paste(url,i,sep=''))) i,
vector()
)
vapply(
c(80:81),
function(x) if (!http_error(paste(url,i,sep=''))) i,
)
vapply(
c(80:81),
function(x) if (!http_error(paste(url,i,sep=''))) i,
)
lapply(
c(80:81),
function(x) if (!http_error(paste(url,i,sep=''))) i,
)
sapply(
c(80:81),
function(x) if (!http_error(paste(url,i,sep=''))) i
)
sapply(
c(80:82),
function(x) if (!http_error(paste(url,i,sep=''))) i
)
sapply(
c(80:82),
function(x) ifelse(!http_error(paste(url,i,sep='')),i,NA)
)
lapply(
c(80:82),
function(x) ifelse(!http_error(paste(url,i,sep='')),i,NA)
)
lapply(
80:82,
function(x) ifelse(!http_error(paste(url,i,sep='')),i,NA)
)
sapply(
80:82,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA)
)
sapply(
80:82,
function(x) if (!http_error(paste(url,x,sep=''))) x
)
lapply(
80:82,
function(x) if (!http_error(paste(url,x,sep=''))) x
)
vapply(
80:82,
function(x) if (!http_error(paste(url,x,sep=''))) x,
FUN.VALUE = list()
)
vapply(
80:82,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA),
FUN.VALUE = list()
)
??vapply
?vapply
vapply(
80:82,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA),
FUN.VALUE = vector
)
lapply(
80:82,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA)
#,FUN.VALUE = vector
)
sapply(
80:82,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA)
#,FUN.VALUE = vector
)
list(sapply(
80:82,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA)
#,FUN.VALUE = vector
)
)
c(sapply(
80:82,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA)
#,FUN.VALUE = vector
)
)
sapply(
80:82,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA)
#,FUN.VALUE = vector
)
matchList <- sapply(
1:20000,
function(x) ifelse(!http_error(paste(url,x,sep='')),x,NA)
)
matchList
playerShotProfiles19_M
View(playerShotProfiles19_M)
